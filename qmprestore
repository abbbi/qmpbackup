#!/usr/bin/env python3
"""
 qmpbackup: Full an incremental backup using Qemus
 dirty bitmap feature

 Copyright (C) 2022  Michael Ablassmeier

 Authors:
  Michael Ablassmeier <abi@grinser.de>

 This work is licensed under the terms of the GNU GPL, version 3.  See
 the LICENSE file in the top-level directory.
"""
import os
import sys
import argparse
from libqmpbackup import version
from libqmpbackup import image
from libqmpbackup import lib

parser = argparse.ArgumentParser(prog=sys.argv[0])
subparsers = parser.add_subparsers(help="sub-command help")
parser_snapshot = subparsers.add_parser("snapshotrebase", help="snapshotrebase")
parser_rebase = subparsers.add_parser("rebase", help="rebase")
parser_merge = subparsers.add_parser("merge", help="merge")

parser_rebase.set_defaults(which="rebase")
parser_rebase.add_argument(
    "--dir", type=str, help="directory which contains images", required=True
)

parser_snapshot.set_defaults(which="snapshotrebase")
parser_snapshot.add_argument(
    "--dir", type=str, help="directory which contains images", required=True
)
parser_snapshot.add_argument(
    "--until",
    type=str,
    help="point in time restore until specified backup file",
    required=False,
)
parser_snapshot.add_argument(
    "--dry-run",
    action="store_true",
    help="do not run commands, only show them",
    required=False,
)
parser_merge.set_defaults(which="merge")
parser_merge.add_argument(
    "--dir", type=str, help="directory which contains images", required=True
)
parser_merge.add_argument(
    "--targetfile",
    type=str,
    help="Restore image to specified target file",
    required=True,
)
parser_merge.add_argument(
    "--until",
    type=str,
    help="point in time restore until specified backup file",
    required=False,
)
parser_rebase.add_argument(
    "--until",
    type=str,
    help="point in time restore until specified backup file",
    required=False,
)
parser_rebase.add_argument(
    "--dry-run",
    action="store_true",
    help="do not run commands, only show them",
    required=False,
)

argv = parser.parse_args()
try:
    action = argv.which
except AttributeError:
    parser.print_help()
    sys.exit(1)

log = lib.setup_log(False)

log.info("Version: %s Arguments: %s", version.VERSION, " ".join(sys.argv))

if action in ("rebase", "merge", "snapshotrebase"):
    if not os.path.exists(argv.dir):
        log.error("Specified target folder does not exist: [%s]", argv.dir)
        sys.exit(1)
    if argv.dry_run:
        log.info("Dry run activated, not applying any changes")

if action == "merge":
    log.info("Merging images in source folder: [%s] to [%s]", argv.dir, argv.targetfile)

    if not os.path.exists(os.path.dirname(argv.targetfile)):
        os.makedirs(os.path.dirname(argv.targetfile), exist_ok=True)

    if image.merge(argv):
        log.info("Image file merge successful.")
        sys.exit(0)
    sys.exit(1)

if action == "rebase":
    log.info("Rebasing images in source folder: [%s]", argv.dir)
    if image.rebase(argv):
        log.info("Image file rebase successful.")
        sys.exit(0)
    sys.exit(1)

if action == "snapshotrebase":
    log.info("Rebasing using snapshot images in source folder: [%s]", argv.dir)
    if image.snapshot_rebase(argv):
        log.info("Image file rebase successful.")
        sys.exit(0)
    sys.exit(1)
