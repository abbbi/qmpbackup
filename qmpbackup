#!/usr/bin/env python3
"""
qmpbackup: Full an incremental backup using Qemus
dirty bitmap feature

Copyright (C) 2022  Michael Ablassmeier

Authors:
 Michael Ablassmeier <abi@grinser.de>

This work is licensed under the terms of the GNU GPL, version 3.  See
the LICENSE file in the top-level directory.
"""
import os
import sys
import asyncio
import signal
import argparse
from time import sleep
from datetime import datetime
from dataclasses import asdict
from qemu.qmp import protocol, QMPClient, qmp_client
from qemu.qmp.error import QMPError

from libqmpbackup.qmpcommon import QmpCommon
from libqmpbackup import lib
from libqmpbackup import fs
from libqmpbackup import vm
from libqmpbackup import image
from libqmpbackup import version

SIGNAL_CATCHED = False


async def stop_jobs(blockdev, log, qmp, signal):
    """Catch signal: for some reason, cancelling the
    running block jobs with block-job-cancel issues
    a regular BLOCK_JOB_COMPLETED in the event loop,
    for some reason. Thus exit with different exit code
    by using global variable :/
    """
    global SIGNAL_CATCHED
    log.error("Caught signal: %s", signal)
    log.error("Stopping backup jobs")
    SIGNAL_CATCHED = True
    jobs = await qmp.execute("query-block-jobs")
    if len(jobs) == 0:
        log.info("No running jobs found")
    for job in jobs:
        if job["type"] != "backup" or not job["device"].startswith("qmpbackup"):
            continue
        try:
            await qmp.execute(
                "block-job-cancel",
                arguments={
                    "device": job["device"],
                    "force": True,
                },
            )
        except qmp_client.ExecuteError as err:
            log.info(err)


async def main():
    """qmpbackup"""
    parser = argparse.ArgumentParser(
        description="Backup QEMU virtual machines",
        epilog=(
            "Examples:\n"
            "   # full backup with all attached disks:\n"
            "\t%(prog)s --socket /tmp/sock backup --level full --target /backup/\n"
            "   # incremental backup with all attached disks:\n"
            "\t%(prog)s --socket /tmp/sock backup --level inc --target /backup/\n"
            "   # show attached block devices:\n"
            "\t%(prog)s --socket /tmp/socket info --show blockdev\n"
            "   # full backup but exclude disk:\n"
            "\t%(prog)s --socket /tmp/sock backup --level full --exclude ide0-hd0"
            " --target /backup/\n"
        ),
        formatter_class=argparse.RawTextHelpFormatter,
    )
    parser.add_argument(
        "--socket", dest="socket", help="qmp socket to connect", required=1
    )
    parser.add_argument(
        "--agent-socket",
        dest="agentsocket",
        help="socket to use for communication with qemu agent",
        required=False,
    )
    parser.add_argument(
        "--debug",
        dest="debug",
        help="more verbose output",
        action="store_true",
        required=False,
    )
    parser.add_argument(
        "-L",
        "--logfile",
        default="",
        help="log output to specified logfile",
        required=False,
    )
    parser.add_argument(
        "--syslog",
        action="store_true",
        help="log output to syslog",
        required=False,
        default=False,
    )
    subparsers = parser.add_subparsers(help="sub-command help")
    parser_backup = subparsers.add_parser("backup", help="backup")
    parser_backup.set_defaults(which="backup")
    parser_backup.add_argument(
        "-l",
        "--level",
        choices=["copy", "full", "inc", "auto"],
        type=str,
        help="backup level",
        required=True,
    )
    parser_backup.add_argument(
        "-e",
        "--exclude",
        type=str,
        default=None,
        help="exclude block device from backup",
        required=False,
    )
    parser_backup.add_argument(
        "-i",
        "--include",
        type=str,
        default=None,
        help="backup only specified block device",
        required=False,
    )
    parser_backup.add_argument(
        "--monthly",
        action="store_true",
        help=(
            "Create monthly backup directories (in format YYYY-MM). "
            "If combined with backup level 'auto' this will "
            "create monthly backup chains."
        ),
        required=False,
    )
    parser_backup.add_argument(
        "--no-subdir",
        action="store_true",
        help="Use flat directory structure for storing the backup files",
        required=False,
    )
    parser_backup.add_argument(
        "--no-timestamp",
        action="store_true",
        help="Dont use timestamp for backup files",
        required=False,
    )
    parser_backup.add_argument(
        "--no-symlink",
        action="store_true",
        help="Dont create symlinks to full backups",
        required=False,
        default=False,
    )
    parser_backup.add_argument(
        "--quiesce",
        action="store_true",
        help="Use Qemu Agent to quiesce filesystem",
        required=False,
    )
    parser_backup.add_argument(
        "-t", "--target", type=str, help="backup target directory", required=True
    )
    parser_backup.add_argument(
        "--speed-limit",
        type=int,
        default=0,
        help="speed limit in bytes / second",
        required=False,
    )
    parser_backup.add_argument(
        "--compress",
        action="store_true",
        default=False,
        help="Attempt to compress data if target image format supports it",
        required=False,
    )
    parser_backup.add_argument(
        "--include-raw",
        action="store_true",
        default=False,
        help="Include raw images in backup.",
        required=False,
    )
    parser_backup.add_argument(
        "--uuid",
        help="use specified uuid for bitmap",
        type=str,
        required=False,
        default="",
    )
    parser_backup.add_argument(
        "--remove-delay",
        help="Delay removal of attached disks (seconds)",
        default=0,
        type=int,
    )
    parser_backup.add_argument(
        "--blockdev-disable-cache",
        help="Disable caching during backup operation",
        required=False,
        action="store_true",
    )
    parser_backup.add_argument(
        "--blockdev-aio",
        help="Aio option to use during backup, default: %(default)s",
        choices=["threads", "io_uring"],
        required=False,
        default="threads",
    )
    parser_cleanup = subparsers.add_parser("cleanup", help="cleanup functions")
    parser_cleanup.set_defaults(which="cleanup")
    parser_cleanup.add_argument(
        "--remove-bitmap",
        action="store_true",
        help="remove all existent bitmaps for all devices",
        required=True,
    )
    parser_cleanup.add_argument(
        "--uuid",
        help="remove bitmaps matching uuid",
        type=str,
        required=False,
        default="",
    )
    parser_info = subparsers.add_parser("info", help="print info about VM")
    parser_info.set_defaults(which="info")
    parser_info.add_argument(
        "--show",
        choices=["blockdev", "bitmaps"],
        type=str,
        help="show block device information",
        required=True,
    )
    argv = parser.parse_args()
    try:
        action = argv.which
    except AttributeError:
        parser.print_help()
        sys.exit(1)

    log = lib.setup_log(argv)
    log.info("Version: %s Arguments: %s", version.VERSION, " ".join(sys.argv))

    if action == "backup" and argv.exclude and argv.include:
        log.error("Specify either included or excluded devices")
        sys.exit(1)

    new_monthly = False
    qmp = QMPClient()
    log.info("Connecting QMP socket: [%s]", argv.socket)
    try:
        await qmp.connect(argv.socket)
    except protocol.ConnectError as errmsg:
        log.fatal("Can't connect QMP socket [%s]: %s", argv.socket, errmsg)
        sys.exit(1)

    qemu_client = QmpCommon(qmp)

    try:
        await qemu_client.show_vm_state()
    except RuntimeError as errmsg:
        log.fatal(errmsg)
        sys.exit(1)

    qemu_client.show_version()
    await qemu_client.show_name()

    excluded_disks = None
    included_disks = None
    uuid = None
    if action == "backup":
        if argv.monthly:
            monthdir = datetime.today().strftime("%Y-%m")
            backupdir = os.path.join(argv.target, monthdir)
            if not os.path.exists(backupdir):
                log.info("New monthly directory will be created: %s", backupdir)
                new_monthly = True
            argv.target = backupdir

        try:
            os.makedirs(argv.target, exist_ok=True)
        except OSError as errmsg:
            log.error("Unable to create target dir: %s", errmsg)
            sys.exit(1)

        log.info("Backup target directory: %s", argv.target)
        if argv.level == "auto":
            if new_monthly is True or not os.path.exists(
                os.path.join(argv.target, "uuid")
            ):
                argv.level = "full"
            else:
                argv.level = "inc"
            log.info("Auto backup mode set to: %s", argv.level)

        if argv.exclude is not None:
            excluded_disks = argv.exclude.split(",")
            log.debug("Excluded disks: %s", excluded_disks)
        if argv.include is not None:
            included_disks = argv.include.split(",")
            log.debug("Saving only specified disks: %s", included_disks)
        if argv.compress:
            log.info("Enabling compress option for backup operation.")
        if argv.include_raw:
            log.info("Including raw devices in backup operation.")
        if argv.level == "full":
            if os.path.exists(os.path.join(argv.target, "uuid")):
                try:
                    uuid = lib.get_uuid(argv.target)
                except RuntimeError as errmsg:
                    log.error("Unable to get backup uuid: [%s]", errmsg)
                    sys.exit(1)
            else:
                try:
                    uuid = lib.save_uuid(argv.target, argv.uuid)
                except RuntimeError as errmsg:
                    log.error("Unable to store backup uuid: [%s]", errmsg)
                    sys.exit(1)
        if argv.level == "inc":
            try:
                uuid = lib.get_uuid(argv.target)
            except RuntimeError as errmsg:
                log.error("Unable to get UUID for incremental backup: [%s]", errmsg)
                sys.exit(1)

    if action == "info":
        argv.include_raw = True
    if action == "cleanup":
        argv.include_raw = False

    blockdev = vm.get_block_devices(
        await qemu_client.do_query_block(), argv, excluded_disks, included_disks, uuid
    )

    loop = asyncio.get_event_loop()
    for signame in ("SIGINT", "SIGTERM"):
        loop.add_signal_handler(
            getattr(signal, signame),
            lambda signame=signame: asyncio.create_task(
                stop_jobs(blockdev, log, qmp, signame)
            ),
        )

    if blockdev is None:
        log.error("VM does not have any devices suitable for backup")
        sys.exit(1)

    if action == "info":
        if argv.show == "blockdev":
            log.info("Attached block devices:")
            for dev in blockdev:
                log.info("%s", lib.json_pp(asdict(dev)))
        if argv.show == "bitmaps":
            for dev in blockdev:
                if not dev.bitmaps:
                    log.info(
                        'No bitmaps found for device: "%s:%s"', dev.node, dev.filename
                    )
                    continue
                log.info("%s:", dev.node)
                log.info("%s", lib.json_pp(dev.bitmaps))

    if action == "cleanup":
        if argv.uuid != "":
            log.info("Removing bitmaps matching uuid [%s]", argv.uuid)
            await qemu_client.remove_bitmaps(blockdev, uuid=argv.uuid)
        else:
            log.info("Removing all existent bitmaps.")
            await qemu_client.remove_bitmaps(blockdev)

    if action == "backup":
        if argv.quiesce and not argv.agentsocket:
            log.warning(
                "Quisce option set but agent socket is missing, please set via --agent-socket"
            )

        backupdir = argv.target
        for device in blockdev:
            tdir = backupdir
            if not argv.no_subdir:
                tdir = os.path.join(backupdir, device.node)
            if (
                device.has_bitmap is False
                and argv.level == "inc"
                and device.format != "raw"
            ):
                log.error(
                    "[%s:%s] Incremental backup requested but no active bitmap has been found.",
                    device.node,
                    device.filename,
                )
                sys.exit(1)
            if argv.level == "inc":
                if not lib.has_full(tdir, device.filename):
                    log.error(
                        "No full backup found for device [%s:%s] in [%s]: Execute full backup first.",
                        device.node,
                        os.path.basename(device.filename),
                        tdir,
                    )
                    sys.exit(1)
                if (
                    not lib.check_bitmap_uuid(device.bitmaps, uuid)
                    and device.format != "raw"
                ):
                    log.error("Unable to find any bitmap with uuid: [%s]", uuid)
                    sys.exit(1)
                if (
                    not lib.check_bitmap_state(device.node, device.bitmaps)
                    and device.format != "raw"
                ):
                    log.error(
                        "Bitmap for device [%s:%s] is not in state ready for backup.",
                        device.node,
                        os.path.basename(device.filename),
                    )
                    sys.exit(1)
                if not lib.has_full(tdir, device.filename):
                    log.error(
                        "No full backup found for device [%s:%s] in [%s]: Execute full backup first.",
                        device.node,
                        os.path.basename(device.filename),
                        tdir,
                    )
                    sys.exit(1)
                if lib.has_partial(tdir):
                    log.error(
                        "Partial backup found in [%s], possible broken backup chain. Execute new full backup",
                        tdir,
                    )
                    sys.exit(1)

        try:
            image.save_info(backupdir, blockdev)
            targetfiles, fleecefiles = image.create(argv, backupdir, blockdev)
        except RuntimeError as errmsg:
            log.fatal(errmsg)
            sys.exit(1)

        qga = False
        if argv.agentsocket and argv.quiesce:
            qga = lib.connect_qaagent(argv.agentsocket)
            if qga:
                fs.quiesce(qga)

        try:
            await qemu_client.prepare_target_devices(argv, blockdev, targetfiles)
            await qemu_client.prepare_fleece_devices(blockdev, fleecefiles)
            await qemu_client.add_cbw_device(argv, blockdev, uuid)
            await qemu_client.backup(argv, blockdev, qga, uuid)
        except (QMPError, RuntimeError) as errmsg:
            log.fatal("Error executing backup: %s", errmsg)
            sys.exit(1)
        finally:
            if int(argv.remove_delay) > 0:
                log.info("Delay removal of devices by [%s] seconds", argv.remove_delay)
                sleep(int(argv.remove_delay))
            try:
                await qemu_client.remove_target_devices(blockdev)
                await qemu_client.remove_cbw_devices(blockdev)
                await qemu_client.remove_fleece_devices(blockdev)
            except QMPError as errmsg:
                log.warning("Unable to cleanup: %s", errmsg)
            if qga is not False:
                fs.thaw(qga)

        if argv.level == "copy":
            blockdev = vm.get_block_devices(
                await qemu_client.do_query_block(),
                argv,
                excluded_disks,
                included_disks,
                uuid,
            )
            log.info("Removing non-persistent bitmaps used for copy backup.")
            await qemu_client.remove_bitmaps(blockdev, prefix="qmpbackup-copy")

        for task in asyncio.all_tasks():
            if task.get_name() == "progress" and task.done() is not True:
                log.debug("Cancelling progress job")
                task.cancel()
        await qmp.disconnect()

        if SIGNAL_CATCHED is True:
            log.error("Backup aborted by signal.")
            sys.exit(1)

        log.info("Renaming partial files")
        for _, saveset in targetfiles.items():
            new_filename = saveset.replace(".partial", "")
            try:
                os.rename(saveset, new_filename)
            except OSError as errmsg:
                log.error("Unable to rename files: %s", errmsg)
                sys.exit(1)

            if argv.no_symlink is True:
                continue

            if argv.level in ("copy", "full") and argv.no_timestamp:
                short = os.path.basename(new_filename)
                tgtdir = os.path.dirname(new_filename)
                os.symlink(new_filename, f"{tgtdir}/{argv.level.upper()}-{short}")

        log.info("Removing fleece image files")
        for _, fleeceimage in fleecefiles.items():
            try:
                os.remove(fleeceimage)
            except OSError as errmsg:
                log.error("Unable to remove file: %s", errmsg)
                sys.exit(1)


if __name__ == "__main__":
    asyncio.run(main())
