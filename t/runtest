#!/bin/bash
AGENT_SOCKET=/tmp/qga.sock
QMP_SOCKET=/tmp/socket
PIDFILE="/tmp/qemu.pid"

cleanup() {
    echo "cleanup"
    if [ -e ${PIDFILE} ]; then
        PID=$(cat ${PIDFILE})
        echo "killing qemu process: ${PID}"
        kill -9 "${PID}"
    fi
    rm -f ${AGENT_SOCKET}
    rm -f ${QMP_SOCKET}
    rm -f /tmp/file.qcow2
    rm -f /tmp/disk1.qcow2
    rm -f /tmp/disk2.qcow2
    rm -f /tmp/disk3.qcow2
    rm -f /tmp/qemu.pid
}
trap cleanup EXIT

set -e

rm -rf /tmp/restore
rm -rf /tmp/backup

IMAGE="https://app.vagrantup.com/generic/boxes/alpine38/versions/3.6.6/providers/libvirt.box"

exist_files() {
    if ! ls "${1}" 1> /dev/null 2>&1; then
        echo "backup file ${1} does not exist"
        exit 1
    fi
}
no_exist_files() {
    if ls "${1}" 1> /dev/null 2>&1; then
        echo "backup files ${1} should not exist"
        exit 1
    fi
}

echo "Downloading image"
[ ! -e /tmp/libvirt.box ] && curl -L -s $IMAGE > /tmp/libvirt.box
[ ! -e /tmp/box.img ] && tar -zxvf /tmp/libvirt.box box.img
mv -f box.img /tmp/disk1.qcow2
if [ -n "${DEBUG_BIG}" ]; then
    echo "two big disks"
    cp /tmp/disk1.qcow2 /tmp/disk2.qcow2
else
    [ ! -e /tmp/disk2.qcow2 ] &&  qemu-img create -f qcow2 /tmp/disk2.qcow2 10M
fi
[ ! -e /tmp/disk3.raw ] && qemu-img create -f raw /tmp/disk3.raw 10M
[ ! -e /tmp/file.qcow2 ] &&  qemu-img create -f qcow2 /tmp/file.qcow2 10M
[ ! -e /tmp/disk4.qcow2 ] &&  qemu-img create -f qcow2 /tmp/disk4.qcow2 10M

KVMOPT=""
[ -e /dev/kvm ] && KVMOPT="--enable-kvm" && echo "with kvm"

if [ -z "$DEBUG_CONSOLE" ]; then
    echo "without console"
    KVMOPT="${KVMOPT} -daemonize -display none"
else
    KVMOPT="${KVMOPT} -net nic,model=virtio,macaddr=52:54:00:00:00:01 -net bridge,br=virtbr0"
fi

echo "Starting qemu process"
qemu-system-x86_64 -name "testvm" $KVMOPT -smp "$(nproc)"  -m 1024 \
    -drive node-name=disk1,file=/tmp/disk1.qcow2,format=qcow2 \
    -drive node-name=disk2,file=/tmp/disk2.qcow2,format=qcow2 \
    -drive node-name=disk3,file=/tmp/disk3.raw,format=raw \
    -drive file=/tmp/disk4.qcow2,format=qcow2 \
    -qmp unix:/tmp/socket,server=on,wait=off \
    -qmp unix:/tmp/socket2,server=on,wait=off \
    -chardev socket,path=$AGENT_SOCKET,server=on,wait=off,id=qga0 \
    -device virtio-serial \
    -device "virtserialport,chardev=qga0,name=org.qemu.guest_agent.0" \
    -blockdev driver=qcow2,node-name=disk.0,file.driver=file,file.filename=/tmp/file.qcow2 \
    -device virtio-scsi-pci,id=scsi \
    -device scsi-hd,drive=disk.0,bus=scsi.0 \
    -pidfile ${PIDFILE}

# wait until qemu agent is reachable within booted Vm, then continue
# with the tests
python3 -u agent.py

if [ -n "$DEBUG_PAUSE" ]; then
    echo "pausing"
    sleep 1d
fi

echo "------------------------------------------------"
echo "Executing qmpbackup tests"
echo "------------------------------------------------"
rm -rf /tmp/backup_no_agent
rm -f /tmp/backup.log
../qmpbackup --agent-socket /tmp/doenstexist --socket $QMP_SOCKET --logfile /tmp/backup.log backup --level full --exclude disk1 --target /tmp/backup_no_agent/ --quiesce
[ -e /tmp/backup.log ]
[ -e /tmp/backup_no_agent/uuid ]
grep Arguments /tmp/backup.log > /dev/null
grep INFO /tmp/backup.log > /dev/null

rm -rf /tmp/backup
../qmpbackup --agent-socket $AGENT_SOCKET --socket $QMP_SOCKET backup --level full --target /tmp/backup/ --quiesce
rm -rf /tmp/copy_backup
../qmpbackup --agent-socket $AGENT_SOCKET --socket $QMP_SOCKET backup --level copy --target /tmp/copy_backup/ --quiesce

exist_files /tmp/backup//disk1/FULL*
exist_files /tmp/backup//disk2/FULL*

# no-subdir option
../qmpbackup --agent-socket $AGENT_SOCKET --socket $QMP_SOCKET backup --level copy --target /tmp/nosubdir_backup/ --no-subdir --quiesce
exist_files /tmp/nosubdir_backup/*disk1.qcow2
exist_files /tmp/nosubdir_backup/*disk2.qcow2
rm -rf /tmp/nosubdir_backup/


# no-timestamp and no-subdir/no-symlink option
../qmpbackup --agent-socket $AGENT_SOCKET --socket $QMP_SOCKET backup --level full --target /tmp/nosubdir_timestamp_backup/ --no-subdir --no-symlink --no-timestamp --quiesce
no_exist_files /tmp/nosubdir_timestamp_backup/FULL*
no_exist_files /tmp/nosubdir_timestamp_backup/FULL*
../qmpbackup --agent-socket $AGENT_SOCKET --socket $QMP_SOCKET backup --level inc --target /tmp/nosubdir_timestamp_backup/ --no-subdir --no-symlink --no-timestamp --quiesce
exist_files /tmp/nosubdir_timestamp_backup/INC*
rm -rf /tmp/nosubdir_timestamp_backup/

# compress option
rm -rf /tmp/compressed_backup/
../qmpbackup --agent-socket $AGENT_SOCKET --socket $QMP_SOCKET backup --level copy --target /tmp/compressed_backup/ --quiesce --compress
rm -rf /tmp/compressed_backup/

# compress option
rm -rf /tmp/raw_backup/
../qmpbackup --agent-socket $AGENT_SOCKET --socket $QMP_SOCKET backup --level full --target /tmp/raw_backup/ --quiesce --include-raw
exist_files /tmp/raw_backup//disk1/FULL*
rm -rf /tmp/raw_backup/

# caching and aio options
rm -rf /tmp/caching/
../qmpbackup --agent-socket $AGENT_SOCKET --socket $QMP_SOCKET backup --level full --target /tmp/caching/ --blockdev-aio io_uring
rm -rf /tmp/caching/
../qmpbackup --agent-socket $AGENT_SOCKET --socket $QMP_SOCKET backup --level full --target /tmp/caching/ --blockdev-disable-cache
rm -rf /tmp/caching/

# auto backup to empty directory must execute FULL backup
rm -rf /tmp/empty
../qmpbackup --agent-socket $AGENT_SOCKET --socket $QMP_SOCKET backup --level auto --target /tmp/empty/ --quiesce
exist_files /tmp/empty//disk1/FULL*
../qmpbackup --agent-socket $AGENT_SOCKET --socket $QMP_SOCKET backup --level auto --target /tmp/empty/ --quiesce
exist_files /tmp/empty//disk1/INC*

# create /tmp/incdata1 within the guest, execute further
# incremental backups
echo "------------------------------------------------"
python3 agent.py incdata1
echo "------------------------------------------------"

../qmpbackup --agent-socket $AGENT_SOCKET --socket $QMP_SOCKET backup --level inc --target /tmp/backup/ --quiesce
exist_files /tmp/backup//disk1/INC*
exist_files /tmp/backup//disk2/INC*

echo "------------------------------------------------"
python3 agent.py incdata2
echo "------------------------------------------------"

../qmpbackup --agent-socket $AGENT_SOCKET --socket $QMP_SOCKET backup --level auto --target /tmp/backup/ --quiesce

echo "------------------------------------------------"
python3 agent.py incdata3
echo "------------------------------------------------"
../qmpbackup --agent-socket $AGENT_SOCKET --socket $QMP_SOCKET backup --level auto --target /tmp/backup/ --quiesce --compress


rm -rf /tmp/monthly
../qmpbackup --socket $QMP_SOCKET backup --level auto --monthly --target /tmp/monthly/
exist_files /tmp/monthly/*/*/FULL*
../qmpbackup --socket $QMP_SOCKET backup --level auto --monthly --target /tmp/monthly/
exist_files /tmp/monthly/*/*/INC*

echo "------------------------------------------------"
echo "Executing common functionality  tests"
echo "------------------------------------------------"
# exclude/include
rm -rf /tmp/exclude
rm -rf /tmp/include
../qmpbackup --agent-socket $AGENT_SOCKET --socket $QMP_SOCKET backup --level full --exclude disk1 --target /tmp/exclude/ --quiesce
[ -e /tmp/exclude/disk1 ] && echo "backed up excluded disk" && exit 1
../qmpbackup --agent-socket $AGENT_SOCKET --socket $QMP_SOCKET backup --level full --include disk2 --target /tmp/include/ --quiesce
[ -e /tmp/exclude/disk1 ] && echo "backed up non included disks" && exit 1
../qmpbackup --agent-socket $AGENT_SOCKET --socket $QMP_SOCKET backup --level full --target /tmp/delay/ --quiesce --remove-delay 10


echo "------------------------------------------------"
echo "Check bitmap information output"
echo "------------------------------------------------"


# at this point, block devices must show bitmaps
../qmpbackup --socket $QMP_SOCKET info --show blockdev | grep "qmpbackup-disk1"
# bitmaps must be active
../qmpbackup --socket $QMP_SOCKET info --show bitmaps 2>&1 | grep "recording.*true"
# at least one bitmap must be removed at this point
../qmpbackup --socket $QMP_SOCKET cleanup --remove-bitmap 2>&1 | grep "Removing bitmap: qmpbackup-disk1"


# exit code of qmpbackup must be errnous if partial backup is found in directory
rm -rf /tmp/partial_backup
../qmpbackup --agent-socket $AGENT_SOCKET --socket $QMP_SOCKET backup --level full --include disk2 --target /tmp/partial_backup/ --quiesce
touch /tmp/partial_backup/disk2/FULL-bar.partial
../qmpbackup --agent-socket $AGENT_SOCKET --socket $QMP_SOCKET backup --level inc --include disk2 --target /tmp/partial_backup/ --quiesce && exit 1
../qmprestore rebase --dir /tmp/partial_backup/disk2/ --dry-run && exit 1

echo "------------------------------------------------"
echo "Executing qmprestore tests: rebase"
echo "------------------------------------------------"
rm -rf /tmp/rebase
cp -a /tmp/backup/disk1/ /tmp/rebase
../qmprestore rebase --dir /tmp/rebase
virt-ls /tmp/rebase/image /tmp | grep incdata3
rm -rf /tmp/skip_check
cp -a /tmp/backup/disk1/ /tmp/skip_check
../qmprestore --skip-check rebase --dir /tmp/skip_check

echo "------------------------------------------------"
echo "Executing qmprestore tests: snapshotrebase"
echo "------------------------------------------------"
rm -rf /tmp/snaprebase
cp -a /tmp/backup/disk1/ /tmp/snaprebase
../qmprestore snapshotrebase --dir /tmp/snaprebase
qemu-img info "$(find /tmp/snaprebase/  -type f)" | grep "Snapshot" || exit 1
rm -rf /tmp/snaprebase

echo "------------------------------------------------"
echo "Executing qmprestore tests: commit"
echo "------------------------------------------------"
rm -rf /tmp/commitrebase /tmp/commitrebaselimit
cp -a /tmp/backup/disk1/ /tmp/commitrebase
../qmprestore commit --dir /tmp/commitrebase
virt-ls -a "$(find /tmp/commitrebase/  -type f)" /tmp | grep incdata3
cp -a /tmp/backup/disk1/ /tmp/commitrebaselimit
../qmprestore commit --dir /tmp/commitrebaselimit --rate-limit 1000000

echo "------------------------------------------------"
echo "Executing qmprestore tests: merge"
echo "------------------------------------------------"
RESTORED_FILE="/tmp/restore/restore.qcow2"
rm -rf /tmp/restore

# merge must not alter original files
md5sum /tmp/backup/disk1/* > /tmp/sum
../qmprestore merge --dir /tmp/backup/disk1/ --targetfile /tmp/restore/restore.qcow2
echo "merge OK"
md5sum /tmp/backup/disk1/* > /tmp/sum_after_restore

echo "check if merge has altered original files"
diff /tmp/sum /tmp/sum_after_restore  || exit 1
echo "OK"

qemu-img info "${RESTORED_FILE}" > /dev/null

ORIGINAL_FILE=$(echo /tmp/backup/disk1/FULL*)
echo "------------------------------------------------------"
echo "Check restored image for contents of all inc backups "
echo "------------------------------------------------------"
qemu-img info "${RESTORED_FILE}" > /dev/null
# between full and inc backup, additional data was changed
# within the image. Diff must show these changes between
# original and on incremental rebased image after restore.
rm -f /tmp/diff
virt-diff -a "$ORIGINAL_FILE" -A "$RESTORED_FILE" > /tmp/diff
grep -m 1 incdata1 /tmp/diff
grep -m 1 incdata2 /tmp/diff
grep -m 1 incdata3 /tmp/diff

echo "OK"
